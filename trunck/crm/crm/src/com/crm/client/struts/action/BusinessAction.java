/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.crm.client.struts.action;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.TimeZone;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.json.JSONArray;
import org.json.JSONObject;

import com.crm.client.po.TClient;
import com.crm.client.po.TOperation;
import com.crm.client.po.TOperationtype;
import com.crm.client.po.TOperlog;
import com.crm.client.service.inf.BusinessServiceDao;
import com.crm.client.struts.form.BusinessForm;
import com.crm.page.PageUtil;
import com.crm.pub.GlobVar;
import com.crm.pub.po.TUser;

/**
 * MyEclipse Struts Creation date: 11-02-2009
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/admin/business" name="businessForm"
 *                input="/form/business.jsp" parameter="task" scope="request"
 *                validate="true"
 */
public class BusinessAction extends DispatchAction {
	/*
	 * Generated Methods
	 */
	BusinessServiceDao businessServiceDao;

	/**
	 * Method 跳转到等级界面
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward toRegister(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {

		BusinessForm businessForm = (BusinessForm) form;

		return new ActionForward("/admin/client/operation/register.jsp");
	}

	/**
	 * Method 跳转到业务列表
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward searchBusinessList(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		BusinessForm businessForm = (BusinessForm) form;

		TOperation operation = new TOperation();
		BeanUtils.copyProperties(operation, businessForm);

		if (null != businessForm.getRegisterdate()
				&& !"".equals(businessForm.getRegisterdate())) {
			operation.setRegdate(new SimpleDateFormat("yyyy-MM-dd")
					.parse(businessForm.getRegisterdate()));
		}
		if (null != businessForm.getCheckeddate()
				&& !"".equals(businessForm.getCheckeddate())) {
			operation.setCheckdate(new SimpleDateFormat("yyyy-MM-dd")
					.parse(businessForm.getCheckeddate()));
		}

		Integer count = this.businessServiceDao.getCount(operation);
		PageUtil pageUtil = new PageUtil(request, count,
				GlobVar.PAGESIZE_BY_TEN_DATA);
		List typeList = this.businessServiceDao.searchBusinessTypeList();
		List businessList = this.businessServiceDao.searchBusinessList(
				operation, pageUtil);

		request.setAttribute("list", businessList);
		request.setAttribute("pageUtil", pageUtil);
		request.setAttribute("typeList", typeList);

		if (null != businessForm.getId() && 0 == businessForm.getId()) {
			businessForm.setId(null);
		}

		return new ActionForward("/admin/client/operation/businesslist.jsp");
	}

	/**
	 * Method 根据计时取得业务类型2
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward searchType2List(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		BusinessForm businessForm = (BusinessForm) form;

		List list = this.businessServiceDao.searchSonBusiness(new Long(
				businessForm.getType1()));

		JSONArray array = new JSONArray();
		for (Object o : list) {
			TOperationtype oper = (TOperationtype) o;
			JSONObject obj = new JSONObject();
			obj.put("id", oper.getId());
			obj.put("type", oper.getType());
			array.put(obj);
		}

		response.getWriter().print(array);

		return null;
	}

	/**
	 * Method 跳转到业务处理页面
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward toCheckBusiness(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		BusinessForm businessForm = (BusinessForm) form;

		TOperation operation = this.businessServiceDao.getBusiness(businessForm
				.getId());
		TClient client = this.businessServiceDao.getClient(businessForm
				.getPhone());
		request.setAttribute("oper", operation);
		request.setAttribute("client", client);
		List typeList = this.businessServiceDao.searchBusinessTypeList();
		request.setAttribute("typeList", typeList);
		businessForm.setState(operation.getState());
		return new ActionForward("/admin/client/operation/info.jsp");
	}

	/**
	 * Method 业务处理
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward checkBusinessLog(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		BusinessForm businessForm = (BusinessForm) form;
		TOperlog operlog = new TOperlog();
		operlog.setOperid(businessForm.getId());

		List list = this.businessServiceDao.searchBusinessStateLog(operlog);
		TOperation operation = this.businessServiceDao.getBusiness(new Long(
				businessForm.getId()));
		List typeList = this.businessServiceDao.searchBusinessTypeList();
		request.setAttribute("typeList", typeList);
		request.setAttribute("oper", operation);
		request.setAttribute("logList", list);
		return new ActionForward("/admin/client/operation/loglist.jsp");
	}

	/**
	 * Method 业务处理
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward updateBusinessState(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		BusinessForm businessForm = (BusinessForm) form;
		TOperation operation = new TOperation();
		BeanUtils.copyProperties(operation, businessForm);

		operation.setCheckuser(((TUser) (request.getSession()
				.getAttribute("user"))).getJobno());
		operation.setCheckdate(new Date());

		Boolean bool = this.businessServiceDao.updateBusinessState(operation);

		if (bool) {
			response
					.getWriter()
					.write(
							"<script>alert('业务处理成功！！');location.href='"
									+ request.getContextPath()
									+ "/admin/business.do?task=searchBusinessList'</script>");
		} else {
			response
					.getWriter()
					.write(
							"<script>alert('业务处理失败！！');location.href='"
									+ request.getContextPath()
									+ "/admin/business.do?task=searchBusinessList'</script>");
		}
		return null;
	}

	/**
	 * Method 检验手机号是否存在
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward checkPhone(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		BusinessForm businessForm = (BusinessForm) form;// TODO Auto-generated
		// method stub

		String phone = businessForm.getPhone();
		TClient client = this.businessServiceDao.getPhoneCheck(phone);

		JSONArray array = new JSONArray();
		JSONObject obj = new JSONObject();
		if (null != client) {
			obj.put("isok", "此手机号码可用正常使用!");
			if (client.getGrade() == 20) {
				obj.put("grade", 100);
			} else if (client.getGrade() == 21) {
				obj.put("grade", 50);
			} else if (client.getGrade() == 22) {
				obj.put("grade", 30);
			} else {
				obj.put("grade", 0);
			}
		} else {
			obj.put("isok", "此手机号码不存在！！");
		}

		array.put(obj);
		response.getWriter().print(array);
		return null;
	}

	/**
	 * Method 业务的登记
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward addBusiness(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		BusinessForm businessForm = (BusinessForm) form;
		TOperation oper = new TOperation();
		BeanUtils.copyProperties(oper, businessForm);
		
		if (null != businessForm.getType2()
				&& !"".equals(businessForm.getType2())) {
			if("93".equals(businessForm.getType2())){
				TClient client = this.businessServiceDao.getClient(businessForm.getPhone());
				if(client.getGrade()!=20){
					response.getWriter().write(
							"<script>alert('该用户不是砖石卡用户，无法办理此业务！');location.href='"
									+ request
											.getContextPath()
									+ "/admin/client/operation/register.jsp';</script>");
					return null;
				}
			}
			if ("21".equals(businessForm.getType2())) {
				List list = this.businessServiceDao.getBusiness(oper);
				if (null != list) {
					for (Iterator iter = list.iterator(); iter.hasNext();) {
						TOperation ele = (TOperation) iter.next();
						if (null != ele) {
							Date date = new Date();
							String month = new SimpleDateFormat("yyyyMM")
									.format(date);
							String getMonth = new SimpleDateFormat("yyyyMM")
									.format(ele.getRegdate());
							if (month.equals(getMonth)) {
								response
										.getWriter()
										.write(
												"<script>alert('该月份该用户已立即开机过一次！请缴费，或下个月才能开通此业务！');location.href='"
														+ request
																.getContextPath()
														+ "/admin/client/operation/register.jsp';</script>");
								return null;
							}
						}
					}
				}
			}
		}
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		sdf.setTimeZone(TimeZone.getTimeZone("GMT+8"));
		String strDate = sdf.format(new Date());
		oper.setRegdate(sdf.parse(strDate));

		if (null != businessForm.getCodeeddate()
				&& !"".equals(businessForm.getCodeeddate())) {
			oper.setCodetime(new SimpleDateFormat("yyyy-MM-dd")
					.parse(businessForm.getCodeeddate()));
		}
		oper.setReguser(((TUser) request.getSession().getAttribute("user"))
				.getJobno());
		oper.setState("1");

		Boolean bool = this.businessServiceDao.addBusiness(oper);

		// 跳转
		if (bool) {
			response
					.getWriter()
					.write(
							"<script>if(confirm('业务登记成功！是否继续登记！')){location.href='"
									+ request.getContextPath()
									+ "/admin/client/operation/register.jsp;'}else{location.href='"
									+ request.getContextPath()
									+ "/admin/business.do?task=searchBusinessList';}</script>");
		} else {
			response
					.getWriter()
					.write(
							"<script>alert('业务登记失败！');location.href='"
									+ request.getContextPath()
									+ "/admin/business.do?task=searchBusinessList';</script>");
		}

		return null;
	}

	public BusinessServiceDao getBusinessServiceDao() {
		return businessServiceDao;
	}

	public void setBusinessServiceDao(BusinessServiceDao businessServiceDao) {
		this.businessServiceDao = businessServiceDao;
	}
}