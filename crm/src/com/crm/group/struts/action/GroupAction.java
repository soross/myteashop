/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.crm.group.struts.action;

import java.io.IOException;
import java.io.PrintWriter;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import jxl.Cell;
import jxl.Sheet;
import jxl.Workbook;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.upload.FormFile;

import com.crm.group.excel.ExportExcel;
import com.crm.group.po.Groups;
import com.crm.group.po.TGrouplinker;
import com.crm.group.po.TGrouplog;
import com.crm.group.po.TOldgroupmess;
import com.crm.group.po.VipArea;
import com.crm.group.po.VipCity;
import com.crm.group.po.VipProvince;
import com.crm.group.service.dao.inf.GroupServiceDao;
import com.crm.group.struts.form.GroupForm;
import com.crm.page.PageUtil;
import com.crm.pub.GlobVar;
import com.crm.pub.po.TData;
import com.crm.pub.po.TUser;

/**
 * MyEclipse Struts Creation date: 10-26-2009
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/admin/group" name="groupForm" input="/form/group.jsp"
 *                parameter="task" scope="request" validate="true"
 */
public class GroupAction extends DispatchAction {
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	/**
	 * 服务层接口定义
	 */
	private GroupServiceDao groupServiceDao;

	/**
	 * 
	 * 显示集团
	 * 
	 */
	public ActionForward showGroup(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		GroupForm groupForm = (GroupForm) form;// TODO Auto-generated method
												// stub
		Groups group = new Groups();
		TUser tuser = (TUser) request.getSession().getAttribute("user");
		String user = tuser.getUserid().substring(0, 5);
		if ("manag".equals(user)) {
			group.setManager(tuser.getUserid());
		}

		String mark = request.getParameter("mark");
		
		if (mark != null) {
			request.getSession().setAttribute("marks", mark);
			
		}
		String ma = request.getSession().getAttribute("marks").toString();
		String state = request.getSession().getAttribute("marks").toString();
		if(ma.equals("2")){
			 state = "'"+request.getSession().getAttribute("marks").toString()+"','4'";
		}
		
		group.setState(state);
		int rcount = groupServiceDao.getCount(group);
		PageUtil pageUtil = new PageUtil(request, rcount,
				GlobVar.PAGESIZE_BY_TEN_DATA);
		List grouplist = groupServiceDao.searchGroup(group, pageUtil);
		request.setAttribute("pageUtil", pageUtil);

		TData data = new TData();
		data.setPid(new Long(3));
		List datalist = groupServiceDao.getData(data);
		request.setAttribute("ma", ma);
		request.setAttribute("datalist", datalist);
		request.setAttribute("grouplist", grouplist);

		return new ActionForward("/admin/group/groupmanage.jsp");
	}

	/**
	 * 
	 * 显示集团添加页面
	 * 
	 */
	public ActionForward addJsp(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		GroupForm groupForm = (GroupForm) form;// TODO Auto-generated method
												// stub
		List privincelist = groupServiceDao.getProvince();
		TData data = new TData();
		data.setPid(new Long(3));
		List datalist = groupServiceDao.getData(data);
		data.setPid(new Long(5));
		List levellist = groupServiceDao.getData(data);
        data.setPid(new Long(9));
        List statu=groupServiceDao.getData(data);
        data.setPid(new Long(101));
        List gtype=groupServiceDao.getData(data);
        request.setAttribute("statu", statu);
		request.setAttribute("gtype",gtype);
		request.setAttribute("levels", levellist);
		request.setAttribute("prilist", privincelist);
		request.setAttribute("datalist", datalist);
		return new ActionForward("/admin/group/addgroup.jsp");
	}

	/**
	 * 
	 * 通过省份得到市
	 * 
	 * @throws IOException
	 * 
	 */
	public ActionForward getCitys(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws IOException {
		response.setContentType("text/html;charset=utf-8");
		response.setCharacterEncoding("utf-8");
		response.setHeader("cache-Control", "no-cache");

		PrintWriter out = response.getWriter();
		String id = request.getParameter("pid");
		VipCity city = new VipCity();
		city.setVProvince(id);
		List citys = groupServiceDao.getCity(city);

		out
				.write("<select id='secity' name='secity' onchange='selectcity();'>");
		out.write("<option value='0'>==请选择==</option>");
		for (Object object : citys) {
			VipCity ct = (VipCity) object;
			out.write("<option value=" + ct.getVCode() + ">" + ct.getVName()
					+ "</option>");
		}

		out.write("</select>");
		return null;
	}

	/**
	 * 
	 * 通过省市得到地区
	 * 
	 * @throws IOException
	 * 
	 */
	public ActionForward getArea(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws IOException {
		response.setContentType("text/html;charset=utf-8");
		response.setCharacterEncoding("utf-8");
		response.setHeader("cache-Control", "no-cache");

		PrintWriter out = response.getWriter();
		String pid = request.getParameter("pid");
		String cid = request.getParameter("cid");
		List citys = groupServiceDao.getAreaList(pid + cid);

		out.write("<select id='area' name='area'>");
		out.write("<option value='0'>==请选择==</option>");
		for (Object object : citys) {
			VipArea ct = (VipArea) object;
			out.write("<option value=" + ct.getNId() + ">" + ct.getVName()
					+ "</option>");
		}

		out.write("</select>");
		return null;
	}

	/**
	 * 
	 * 添加集团
	 * 
	 * @throws InvocationTargetException
	 * @throws IllegalAccessException
	 * 
	 */
	public ActionForward addGroup(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		GroupForm groupForm = (GroupForm) form;// TODO Auto-generated method
												// stub
		String bprivince = groupForm.getProvince();// 省份
		String bcity = groupForm.getCity();// 城市
		String bvocation = groupForm.getVocation();// 行业
		
		Date da = new Date();
		String ym = da.toLocaleString();
		String year = ym.substring(2, 4);
		String month = ym.substring(5, 7);
		String gtime = year + month;
		String nextid = groupServiceDao.getGroupId(gtime, bprivince, bcity,
				bvocation);
		TData vo = groupServiceDao.getData(new Long(groupForm.getVocation()));
       
		VipCity ci = groupServiceDao.getCity(groupForm.getCity(), groupForm
				.getProvince());
		VipProvince pro = groupServiceDao.getPro(groupForm.getProvince());
		
		Groups group = new Groups();
		BeanUtils.copyProperties(group, groupForm);
		
		group.setGroupid(nextid);
		group.setPrivince(pro.getVName());
		group.setCity(ci.getVName());
		group.setVocation(vo.getName());
		group.setGrouplevel("未分级");
		TUser tuser = (TUser) request.getSession().getAttribute("user");
		String user = tuser.getUserid().substring(0, 5);
		if ("manag".equals(user)) {
			group.setManager(tuser.getUserid());
		}
		else{
			group.setManager("未分配");
		}
		group.setState("0");

		TGrouplog grouplog = new TGrouplog();// 日志表加数据
		grouplog.setOpens("0");
		grouplog.setOpentime(new Date());
		grouplog.setOperationer(tuser.getUserid());
		grouplog.setGroupid(nextid);
		TOldgroupmess hmess = new TOldgroupmess();
		BeanUtils.copyProperties(hmess, group);// 历史记录表加数据
		hmess.setWorker(tuser.getUserid());
		hmess.setWorktime(new Date());
		hmess.setWorktype("0");
		hmess.setGroupid(nextid);

		groupServiceDao.addGroup(group);
		groupServiceDao.addglog(grouplog);
		groupServiceDao.addhistory(hmess);
		response.getWriter().print(
				"<script> if(confirm('添加成功,是否继续?')){location.href='"
						+ request.getContextPath()
						+ "/admin/group.do?task=addJsp';}else{location.href='"
						+ request.getContextPath()
						+ "/admin/group.do?task=showGroup';}</script>");
		return null;
	}

	/**
	 * 
	 * 修改集团页面
	 * 
	 * @throws InvocationTargetException
	 * @throws IllegalAccessException
	 * 
	 */
	public ActionForward updateJsp(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		GroupForm groupForm = (GroupForm) form;// TODO Auto-generated method
												// stub
		String id = request.getParameter("id");
		Groups group = groupServiceDao.getGroup(id);
		BeanUtils.copyProperties(groupForm, group);
		
		TData vo = groupServiceDao.getData(new Long(id.substring(9, 11)));
         groupForm.setVocation(vo.getId().toString());
         
		VipCity ci = groupServiceDao.getCity(id.substring(7, 9), id.substring(
				4, 7));
		groupForm.setSecity(ci.getVCode().toString());
		System.out.println(groupForm.getSecity());
		VipCity city = new VipCity();
		city.setVProvince(id.substring(
				4, 7));
		List citylist = groupServiceDao.getCity(city);//所属城市列表
		
		VipProvince pro = groupServiceDao.getPro(id.substring(4, 7));
		groupForm.setProvince(pro.getVCode().toString());
		VipArea varea = groupServiceDao.getAreas(new Long(group.getArea()));
		
		
		List arealist = groupServiceDao.getAreaList(id.substring(
				4, 7) + id.substring(7, 9));//所属地区列表
		

		List privincelist = groupServiceDao.getProvince();//所属省
		TData data = new TData();
		data.setPid(new Long(3));
		List datalist = groupServiceDao.getData(data);//所属行业列表
        
		String ma = request.getSession().getAttribute("marks").toString();

		
		
		data.setPid(new Long(9));
        List statu=groupServiceDao.getData(data);//
        data.setPid(new Long(101));
        List gtype=groupServiceDao.getData(data);//
        
        request.setAttribute("pro", pro);
		request.setAttribute("city", ci);
		request.setAttribute("voca", vo);
		request.setAttribute("areas", varea);
        request.setAttribute("statu", statu);
		request.setAttribute("gtype",gtype);
		request.setAttribute("ma", ma);
		request.setAttribute("pro", pro);
		request.setAttribute("citylist", citylist);
		request.setAttribute("voca", vo);
		request.setAttribute("arealist", arealist);
		request.setAttribute("prilist", privincelist);
		request.setAttribute("datalist", datalist);
		return new ActionForward("/admin/group/updategroup.jsp");
	}

	/**
	 * 
	 * 修改集团
	 * 
	 * @throws Exception
	 * 
	 */
	public ActionForward updateGroup(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		GroupForm groupForm = (GroupForm) form;// TODO Auto-generated method
												// stu
		String gpro = groupForm.getProvince();
		String gcity = groupForm.getSecity();
		String gvo = groupForm.getVocation();
		String allg = gpro + gcity + gvo;
		TData vo = groupServiceDao.getData(new Long(groupForm.getVocation()));
		VipCity ci = groupServiceDao.getCity(groupForm.getCity(), groupForm
				.getProvince());
		VipProvince pro = groupServiceDao.getPro(groupForm.getProvince());

		Groups group = new Groups();
		// 判断是否有修改省份，城市，行业，如果有则从新生成集团编号
		if (groupForm.getGroupid().substring(4, 11).equals(allg)) {
			group.setGroupid(groupForm.getGroupid());
		} else {

			String gtime = groupForm.getGroupid().substring(0, 4);
			String nextid = groupServiceDao.getGroupId(gtime, gpro, gcity, gvo);

			group.setGroupid(nextid);
		}

		BeanUtils.copyProperties(group, groupForm);
		group.setPrivince(pro.getVName());
		group.setCity(ci.getVName());
		group.setVocation(vo.getName());

		if (groupForm.getGroupid().substring(4, 11).equals(allg)) {
			groupServiceDao.updateGroup(group);
		} else {

			groupServiceDao.updateGroup(group, groupForm.getGroupid());
		}

		TUser tuser = (TUser) request.getSession().getAttribute("user");
		TGrouplog grouplog = new TGrouplog();// 日志表加数据
		grouplog.setOpens("1");
		grouplog.setOpentime(new Date());
		grouplog.setOperationer(tuser.getUserid());
		grouplog.setGroupid(groupForm.getGroupid());
		TOldgroupmess hmess = new TOldgroupmess();
		BeanUtils.copyProperties(hmess, group);// 历史记录表加数据
		hmess.setWorker(tuser.getUserid());
		hmess.setWorktime(new Date());
		hmess.setWorktype("1");
		groupServiceDao.addglog(grouplog);
		groupServiceDao.addhistory(hmess);

		response.getWriter().print(
				"<script> alert('修改成功!');location.href='"
						+ request.getContextPath()
						+ "/admin/group.do?task=showGroup';</script>");
		return null;

	}

	/**
	 * 
	 * 删除集团
	 * 
	 * @throws IOException
	 * 
	 */
	public ActionForward deleteGroup(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws IOException {
		String id = request.getParameter("id");

		Groups gro = new Groups();
		gro.setGroupid(id);
		groupServiceDao.deleteGroup(gro);

		response.getWriter().print(
				"<script> location.href='" + request.getContextPath()
						+ "/admin/group.do?task=showGroup';</script>");
		return null;
	}

	/**
	 * 
	 * 查询集团
	 * 
	 * @throws InvocationTargetException
	 * @throws IllegalAccessException
	 * 
	 */
	public ActionForward searchGroup(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		GroupForm groupForm = (GroupForm) form;// TODO Auto-generated method
												// stub
		Groups group = new Groups();
		BeanUtils.copyProperties(group, groupForm);
	

		if (!"".equals(groupForm.getVocation())
				&& null != groupForm.getVocation()) {

			TData vo = groupServiceDao
					.getData(new Long(groupForm.getVocation()));

			group.setVocation(vo.getName());
		}

		String ma = request.getSession().getAttribute("marks").toString();
		String state = request.getSession().getAttribute("marks").toString();
		if(ma.equals("2")){
			 state = "'"+request.getSession().getAttribute("marks").toString()+"','4'";
		}
		group.setState(state);
		int rcount = groupServiceDao.getCount(group);
		PageUtil pageUtil = new PageUtil(request, rcount,
				GlobVar.PAGESIZE_BY_TEN_DATA);
		List grouplist = groupServiceDao.searchGroup(group, pageUtil);
		request.setAttribute("pageUtil", pageUtil);

		TData data = new TData();
		data.setPid(new Long(3));
		List datalist = groupServiceDao.getData(data);
		request.setAttribute("ma", ma);
		request.setAttribute("datalist", datalist);
		request.setAttribute("grouplist", grouplist);

		return new ActionForward("/admin/group/groupmanage.jsp");

	}

	/**
	 * 
	 * 修改集团状态（审核非潜在集团和转正式集团）
	 * 
	 * @throws InvocationTargetException
	 * @throws IllegalAccessException
	 * 
	 */
	public ActionForward checkGroup(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		GroupForm groupForm = (GroupForm) form;// TODO Auto-generated method
												// stub
		Groups upgroup = new Groups();
		String id = request.getParameter("id");
		upgroup.setGroupid(id);
		String sta = request.getParameter("sta");
		if (sta.equals("0")) {// 审核通过
			upgroup.setState("1");
			response.getWriter().print(
					"<script> alert('该集团已通过审核，请到潜在集团中查看！');</script>");
		} else if (sta.equals("1")) {// 转正
			upgroup.setState("2");
			TUser tuser = (TUser) request.getSession().getAttribute("user");
			TGrouplog grouplog = new TGrouplog();// 日志表加数据
			grouplog.setOpens("2");
			grouplog.setOpentime(new Date());
			grouplog.setOperationer(tuser.getUserid());
			grouplog.setGroupid(id);
			groupServiceDao.addglog(grouplog);
			response.getWriter().print(
					"<script> alert('该集团已转正，请到正式集团中查看！');</script>");
		} else if (sta.equals("2")) {// 注销
			upgroup.setState("4");
			response.getWriter().print("<script> alert('该集团已被注销！');</script>");
		} else if (sta.equals("3")) {// 审核废弃
			upgroup.setState("3");
			response.getWriter().print("<script> alert('该集团已废弃！');</script>");
		}
		groupServiceDao.updateState(upgroup);// 修改集团状态

		response.getWriter().print(
				"<script>location.href='" + request.getContextPath()
						+ "/admin/group.do?task=showGroup';</script>");
		return null;
	}

	/**
	 * 添加联系人
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward addLinker(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {

		GroupForm groupForm = (GroupForm) form;
		TGrouplinker linker = new TGrouplinker();
		BeanUtils.copyProperties(linker, groupForm);

		groupServiceDao.addLinker(linker);
		response.getWriter().print(
				"<script> alert('添加联系人成功!');location.href='"
						+ request.getContextPath()
						+ "/admin/group.do?task=showGroup';</script>");
		return null;
	}

	/**
	 * 修改联系人
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward updateLinker(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {

		GroupForm groupForm = (GroupForm) form;
		TGrouplinker linker = new TGrouplinker();
		BeanUtils.copyProperties(linker, groupForm);

		groupServiceDao.updateLinker(linker);
		response.getWriter().print(
				"<script> alert('修改联系人成功!');location.href='"
						+ request.getContextPath()
						+ "/admin/group.do?task=showGroup';</script>");
		return null;
	}

	/**
	 * 删除联系人
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward deleteLinker(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {

		GroupForm groupForm = (GroupForm) form;
		TGrouplinker linker = new TGrouplinker();
		BeanUtils.copyProperties(linker, groupForm);

		groupServiceDao.deleteLinker(linker);
		response.getWriter().print(
				"<script> alert('删除联系人成功!');location.href='"
						+ request.getContextPath()
						+ "/admin/group.do?task=showGroup';</script>");
		return null;
	}

	/**
	 * 导出EXCEL
	 * 
	 * 
	 */
	public ActionForward outExcel(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		GroupForm groupForm = (GroupForm) form;// TODO Auto-generated method
												// stub
		String[] selectg = groupForm.getSel();
		String gid = "";
		String id = "";
		if (selectg != null) {
			for (int i = 0; i < selectg.length; i++) {
				gid = gid +","+ selectg[i];
			}
			id = gid.substring(1);
		
		}
		String state=request.getSession().getAttribute("marks").toString();
		TUser tuser = (TUser) request.getSession().getAttribute("user");
		String username = tuser.getUserid();
		String sql = "";
		if (username.equals("admin")) {
			sql = "select * from groups where state='"+state+"'";
			if (selectg != null) {
				sql += " and groupid in (" + id + ")";
			}

		} else {
			sql = "select * from groups where manager='" + username+"' and state='"+state+"'";
			if (selectg != null) {
				sql += " and groupid in ( " + id + " )";
			}

		}
		String[] titles = new String[] { "集团ID", "集团名", "所属行业", "集团级别",
				"是否党政军", "所属省", "所属市", "所属区", "地址", "邮编","法人","网址","注册资金","财务状况","运营状况",
				"员工人数","企业性质", "客户经理", "集团状态" };
		ExportExcel export = new ExportExcel();
		String sheetTitle = "Excel1";
		export.exportExcel(response, sql, titles, sheetTitle);
		return null;
	}

	/**
	 * 导入EXCEL
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward inExcel(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		GroupForm groupForm = (GroupForm) form;// TODO Auto-generated method
		TUser tuser = (TUser) request.getSession().getAttribute("user");										// stub
		FormFile fpath = groupForm.getFiles();

			Workbook book = Workbook.getWorkbook(fpath.getInputStream());
			Sheet sheet = book.getSheet(0);
			sheet.getCell(0, 0);
			List<Groups> list= new ArrayList<Groups>();
			for (int i = 1; i < sheet.getRows(); i++) {
				Cell cell1 = sheet.getCell(0, i);
				String groupid = cell1.getContents();

				Cell cell2 = sheet.getCell(1, i);
				String groupname = cell2.getContents();

				Cell cell3 = sheet.getCell(2, i);
				String vocation = cell3.getContents();

				Cell cell4 = sheet.getCell(3, i);
				String grouplevel = cell4.getContents();
				
				Cell cell5 = sheet.getCell(4, i);
				String army = cell5.getContents();
         
				Cell cell6 = sheet.getCell(5, i);
				String privince = cell6.getContents();

				Cell cell7 = sheet.getCell(6, i);
				String city = cell7.getContents();

				Cell cell8 = sheet.getCell(7, i);
				String area = cell8.getContents();

				Cell cell9 = sheet.getCell(8, i);
				String address = cell9.getContents();

				Cell cell10 = sheet.getCell(9, i);
				String post = cell10.getContents();
				
				Cell cell11 = sheet.getCell(9, i);
				String useman = cell11.getContents();
				
				Cell cell12 = sheet.getCell(9, i);
				String web = cell12.getContents();
				
				Cell cell13 = sheet.getCell(9, i);
				String openmon = cell13.getContents();
				
				Cell cell14 = sheet.getCell(9, i);
				String moneytype = cell14.getContents();
				
				Cell cell15 = sheet.getCell(9, i);
				String sendtype = cell15.getContents();
				
				Cell cell16 = sheet.getCell(9, i);
				String empcount = cell16.getContents();
				
				Cell cell17 = sheet.getCell(9, i);
				String grouptype = cell17.getContents();

				Cell cell18 = sheet.getCell(10, i);
				String manager = cell18.getContents();

				Cell cell19 = sheet.getCell(11, i);
				String state = cell19.getContents();

				Groups group = new Groups();
				group.setGroupid(groupid);
				group.setGroupname(groupname);
				group.setVocation(vocation);
				group.setGrouplevel(grouplevel);
				group.setArmy(army);
				group.setArea(area);
				group.setCity(city);
				group.setPrivince(privince);
				if ("manag".equals(tuser.getUserid())) {
					group.setManager(tuser.getUserid());
				}
				else{
					group.setManager("未分配");
				}
				group.setPost(post);
				group.setAddress(address);
				group.setState("0");
				group.setUseman(useman);
				group.setEmpcount(empcount);
				group.setGrouptype(grouptype);
				group.setMoneytype(moneytype);
				group.setWeb(web);
				group.setOpenmon(openmon);
				group.setSendtype(sendtype);
				
              list.add(group);
				
			}

			try {
				groupServiceDao.addGroups(list);
				response
						.getWriter()
						.print(
								"<script>if(window.confirm('导入成功，是否继续？'))"
										+ "{history.back();}else"
										+ "{window.location.href='"
										+ request.getContextPath()
										+ "'+'/admin/group.do?task=showGroup';}</script>");
			} catch (IOException e) {
				response
				.getWriter()
				.print(
						"<script>if(window.confirm('导入失败，是否重新导入？'))"
								+ "{history.back();}else"
								+ "{window.location.href='"
								+ request.getContextPath()
								+ "'+'/admin/group.do?task=showGroup';}</script>");
			
		}
		return null;

	}

	/**
	 * 添加联系人页面
	 */
	public ActionForward addLinkerJsp(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		GroupForm groupForm = (GroupForm) form;
		String gid = request.getParameter("gid");
		groupForm.setGroupid(gid);
		Groups group = groupServiceDao.getGroup(gid);
		request.setAttribute("groupname", group.getGroupname());
		return new ActionForward("/admin/group/addlinker.jsp");

	}

	/**
	 * 修改联系人页面
	 */
	public ActionForward updateLinkerJsp(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		GroupForm groupForm = (GroupForm) form;
		String gid = request.getParameter("gid");
		TGrouplinker linker = groupServiceDao.getLinker(gid);
		BeanUtils.copyProperties(groupForm, linker);
		Groups group = groupServiceDao.getGroup(gid);
		request.setAttribute("groupname", group.getGroupname());
		return new ActionForward("/admin/group/updatelinker.jsp");

	}

	/**
	 * 
	 * 显示联系人添加页面
	 * 
	 * @throws IOException
	 * @throws InvocationTargetException
	 * @throws IllegalAccessException
	 * 
	 */
	public ActionForward addOrUpdate(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws IOException, IllegalAccessException,
			InvocationTargetException {
		GroupForm groupForm = (GroupForm) form;// TODO Auto-generated method
												// stub

		String id = request.getParameter("id");
		TGrouplinker linker = groupServiceDao.getLinker(id);
		if (linker == null) {

			response.getWriter().print(
					"<script> if(confirm('您还未添加联系人，是否添加联系人?')){location.href='"
							+ request.getContextPath()
							+ "/admin/group.do?task=addLinkerJsp&gid=" + id
							+ "';}else{location.href='"
							+ request.getContextPath()
							+ "/admin/group.do?task=showGroup';}</script>");

			return null;
		} else {

			TGrouplinker link = groupServiceDao.getLinker(id);
			BeanUtils.copyProperties(groupForm, link);
			Groups group = groupServiceDao.getGroup(id);
			request.setAttribute("groupname", group.getGroupname());
			return new ActionForward("/admin/group/updatelinker.jsp");

		}

	}
	/**
	 * 
	 * 集团分级页面
	 * 
	 */
	public ActionForward levelJsp(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		GroupForm groupForm = (GroupForm) form;
		String[] selectg = groupForm.getSel();
		String id=selectg[0];
		Groups group = groupServiceDao.getGroup(id);
		BeanUtils.copyProperties(groupForm, group);
		TData data = new TData();
		data.setPid(new Long(5));
		List levellist = groupServiceDao.getData(data);

		request.setAttribute("levels", levellist);
		request.setAttribute("groupname", group.getGroupname());
		return new ActionForward("/admin/group/grouplevel.jsp");

	}
	/**
	 * 
	 * 集团分级
	 * 
	 */
	public ActionForward updateLevel(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		GroupForm groupForm = (GroupForm) form;
		Groups group=new Groups();
		group.setGroupid(groupForm.getGroupid());
		TData level = groupServiceDao.getData(new Long(groupForm.getGrouplevel()));//级别
		group.setGrouplevel(level.getName());
		groupServiceDao.updateLevel(group);
		response.getWriter().print(
				"<script> alert('级别分配成功!');location.href='"
						+ request.getContextPath()
						+ "/admin/group.do?task=showGroup';</script>");
		return null;
	}
	public GroupServiceDao getGroupServiceDao() {
		return groupServiceDao;
	}

	public void setGroupServiceDao(GroupServiceDao groupServiceDao) {
		this.groupServiceDao = groupServiceDao;
	}
}