/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.crm.pub.struts.action;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.apache.struts.action.ActionRedirect;
import org.apache.struts.actions.DispatchAction;

import com.crm.cache.CacheUtil;
import com.crm.pub.excel.ComparatorPower;
import com.crm.pub.po.TPower;
import com.crm.pub.po.TRole;
import com.crm.pub.po.TUser;
import com.crm.pub.service.dao.inf.UserServiceDao;
import com.crm.pub.struts.form.LoginForm;
import com.crm.tool.DateUtil;

/**
 * MyEclipse Struts Creation date: 10-22-2009
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/login" name="loginForm" input="/form/login.jsp"
 *                parameter="task" scope="request" validate="true"
 */
public class LoginAction extends DispatchAction {

	private UserServiceDao userServiceDao;
	private CacheUtil cacheUtil;

	/**
	 * 登录方法,包括用户的信息验证
	 */
	public ActionForward login(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		LoginForm loginForm = (LoginForm) form;
		ActionMessages messages = new ActionMessages();
		// 随机码
		String code = request.getSession().getAttribute("rand").toString();

		if (null != loginForm.getCode()
				&& loginForm.getCode().equals(code)) {// 判断验证码
			// 获取用户信息
			TUser tuser = userServiceDao.getUser(loginForm.getUserId());
			if (null != tuser) {// 判断用户
				if (null != tuser.getPassword()
						&& tuser.getPassword().equals(loginForm.getPassword())) {
					if ("1".equalsIgnoreCase(tuser.getSlock())) {
						Set<TRole> roles = tuser.getRoles();
						Set<TPower> powers = new TreeSet<TPower>();
						for (TRole role : roles) {
							powers.addAll(role.getPowers());
						}
						// 用户权限增加到权限集合中
						powers.addAll(tuser.getPowers());
						// 转成list
						List<TPower> powerList = new ArrayList<TPower>(powers);
						// 去重复 排序
						ComparatorPower cp = new ComparatorPower();
						Collections.sort(powerList, cp);

						// 放到session中
						request.getSession().setAttribute("powers", powerList);

						// 顶层菜单 的数量
						int count = 0;
						for (int i = 0; i < powerList.size(); i++) {
							TPower power = (TPower) powerList.get(i);
							if ("0".equals(power.getParentid().toString())) {
								count++;
							}
						}
						request.getSession().setAttribute("count", count);

						// 设置第一界面菜单
						String id = null;
						for (int i = 0; i < powerList.size(); i++) {
							TPower power = (TPower) powerList.get(i);
							if ("0".equals(power.getParentid().toString())) {
								id = power.getId().toString();
								break;
							}
						}
						// 查询第一界面菜单的子集
						List<TPower> sonPowerList = new ArrayList<TPower>();
						for (int i = 0; i < powerList.size(); i++) {
							TPower power = (TPower) powerList.get(i);
							if (id.equals(power.getParentid().toString())) {
								sonPowerList.add(power);
							}
						}
						// 放到session中
						request.getSession().setAttribute("sonPowers",
								sonPowerList);

						// 保存user到session
						request.getSession().setAttribute("user", tuser);
						return new ActionRedirect("/admin/main.jsp");
					} else {
						messages.add("msg", new ActionMessage("用户处于冻结状态,无法登入!",
								false));
						this.saveMessages(request, messages);
					}

				} else {
					messages.add("msg", new ActionMessage("用户密码不正确!", false));
					this.saveMessages(request, messages);
				}

			} else {
				messages.add("msg", new ActionMessage("用户不存在!", false));
				this.saveMessages(request, messages);
			}
		} else {
			messages.add("msg", new ActionMessage("验证码不正确!", false));
			this.saveMessages(request, messages);
		}
		return mapping.getInputForward();
	}

	/**
	 * 退出
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward exit(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		request.getSession().invalidate();
		response
				.getWriter()
				.write(
						"<script>window.opener=null;window.open('', '_self', '');window.close();</script>");
		return null;
	}

	/**
	 * 重新登入
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward relogin(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		request.getSession().invalidate();
		response.getWriter().write(
				"<script>top.location.href='" + request.getContextPath()
						+ "/login.jsp';</script>");
		return null;
	}

	/**
	 * 记事本
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward notepad(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		// response.getWriter().write("<script>var WshShell = new
		// ActiveXObject('WScript.Shell');WshShell.Run('notepad');</script>");
		Runtime.getRuntime().exec("notepad");
		return null;
	}

	/**
	 * 计算器
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward calc(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		// response.getWriter().write("<script>var WshShell = new
		// ActiveXObject('WScript.Shell');WshShell.Run('calc');</script>");
		Runtime.getRuntime().exec("calc");
		return null;
	}

	/**
	 * 系统主机信息
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward winmsd(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		// response.getWriter().write("<script>var WshShell = new
		// ActiveXObject('WScript.Shell');WshShell.Run('calc');</script>");
		Runtime.getRuntime().exec("winmsd");
		return null;
	}

	/**
	 * 跳转到系统时间校验
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward toCheckDate(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		request.getSession().setAttribute("currTime",
				DateUtil.DateToStringBy_YMDHMS(new Date()));
		// request.getRequestDispatcher("/admin/pub/checktime.jsp").forward(request,
		// response);
		return new ActionRedirect("/admin/pub/checktime.jsp");
	}

	/**
	 * 跳转到系统时间校验
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward checkDate(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		LoginForm loginForm = (LoginForm) form;
		String dateStr = loginForm.getNewdate();
		String date = "cmd/ date " + dateStr.substring(0, 10);
		String time = "cmd/ time " + dateStr.substring(11);// cmd/ time
		// 12:00:00
		Runtime.getRuntime().exec(date);
		Runtime.getRuntime().exec(time);
		response.getWriter().write(
				"<script>alert('系统时间校准成功!');location.href='"
						+ request.getContextPath()
						+ "/admin/pub/checktime.jsp';</script>");
		;
		return null;
	}

	public ActionForward menu(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {

		List powerList = (ArrayList) request.getSession()
				.getAttribute("powers");
		List sonPowerList = new ArrayList();

		String menuid = request.getParameter("menuid");

		for (int i = 0; i < powerList.size(); i++) {
			TPower power = (TPower) powerList.get(i);
			if (menuid.equals(power.getParentid().toString())) {
				sonPowerList.add(power);
			}
		}
		request.getSession().setAttribute("sonPowers", null);
		request.getSession().setAttribute("sonPowers", sonPowerList);

		// cacheUtil.putObjectInCache("sonPowers", sonPowerList);

		String url = request.getParameter("url");
		response.getWriter().print(
				"<script>location.href='" + request.getContextPath() + url
						+ "';</script>");
		return null;// new ActionRedirect(url);
	}

	public UserServiceDao getUserServiceDao() {
		return userServiceDao;
	}

	public void setUserServiceDao(UserServiceDao userServiceDao) {
		this.userServiceDao = userServiceDao;
	}

	public static void main(String[] args) {
		String dateStr = "2012-01-01 22:00:00";
		String date = dateStr.substring(0, 10);
		String time = dateStr.substring(11);
		System.out.println(date);
		System.out.println(time);
	}

	public CacheUtil getCacheUtil() {
		return cacheUtil;
	}

	public void setCacheUtil(CacheUtil cacheUtil) {
		this.cacheUtil = cacheUtil;
	}

}