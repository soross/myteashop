/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.crm.score.struts.action;

import java.net.URLDecoder;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.json.JSONArray;
import org.json.JSONObject;

import com.crm.client.po.TClient;
import com.crm.page.PageUtil;
import com.crm.pub.GlobVar;
import com.crm.pub.po.TUser;
import com.crm.score.bean.CartBean;
import com.crm.score.po.TApplyscore;
import com.crm.score.po.TBack;
import com.crm.score.po.TChange;
import com.crm.score.po.TChangeItem;
import com.crm.score.po.TMonthScore;
import com.crm.score.po.TPresent;
import com.crm.score.po.TScorelog;
import com.crm.score.po.TTotalScore;
import com.crm.score.po.TYearScore;
import com.crm.score.service.dao.inf.ScoreServiceDao;
import com.crm.score.struts.form.ScoreForm;

/**
 * @author lxj 积分action 包括积分申请，消费等相关操作
 */
public class ScoreAction extends DispatchAction {

	private ScoreServiceDao scoreServiceDao;

	/**
	 * 查询积分申请列表 Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward applyList(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ScoreForm scoreForm = (ScoreForm) form;
		TApplyscore score = new TApplyscore();
		score.setPhone(scoreForm.getPhone());
		int rcount = scoreServiceDao.getApplyCount(score);
		PageUtil pageUtil = new PageUtil(request, rcount,
				GlobVar.PAGESIZE_BY_BIG_DATA);
		List list = scoreServiceDao.searchApply(score, pageUtil);
		request.setAttribute("applyList", list);
		request.setAttribute("pageUtil", pageUtil);
		return new ActionForward("/admin/score/apply/score_apply.jsp");
	}

	/**
	 * 客户信息验证 Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws JSONException
	 */
	public ActionForward checkClient(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		String phone = request.getParameter("tel");
		TApplyscore apply = scoreServiceDao.getApply(phone);
		if (apply == null) {
			TClient client = scoreServiceDao.getClient(phone);
			if (client == null) {
				response.getWriter().print("noone");
			} else {
				TTotalScore totalScore = scoreServiceDao.getTotal(phone);
				if(totalScore.getVintegral()==0){
					response.getWriter().print("noScore");
				}
				// 使用json拼装
				// 定义jsonarray对象
				JSONArray array = new JSONArray();
				JSONObject obj = new JSONObject();
				obj.put("phone", client.getPhone());
				obj.put("name", client.getName());
				obj.put("type", client.getType());
				obj.put("code", client.getCode());
				obj.put("isuse", totalScore.getVintegral());
				obj.put("total", totalScore.getTotal());
				array.put(obj);
				response.getWriter().print(array);
			}
		} else {
			response.getWriter().print("exist");
		}
		return null;
	}

	/**
	 * 添加积分申请
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward addApply(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		TUser tuser = (TUser) request.getSession().getAttribute("user");
		ScoreForm scoreForm = (ScoreForm) form;
		TApplyscore apply = new TApplyscore();
		apply.setPhone(scoreForm.getPhone());
		apply.setOperdate(new Date());
		apply.setOperater(tuser.getUserid());
		Boolean flag = scoreServiceDao.addApply(apply);
		if (flag) {			
			request.setAttribute("message", "号码"+scoreForm.getPhone()+"申请积分成功！是否进入消费?");
			request.setAttribute("url", request.getContextPath()+"/admin/score.do?task=applyList");
			request.setAttribute("y_url", request.getContextPath()+"/admin/present.do?task=pay");
			return mapping.findForward("confirm");
		} else {
			request.setAttribute("message", "申请积分失败!");
			request.setAttribute("url", request.getContextPath()+"/admin/score.do?task=applyList");
			return mapping.findForward("result");
		}
	}

	/**
	 * 积分消费客户信息验证
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward payCheck(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		String type = request.getParameter("type");
		type = URLDecoder.decode(type, "utf-8");
		String code = request.getParameter("code");
		String tel = request.getParameter("tel");
		TClient client = scoreServiceDao.getClient(tel);

		TApplyscore apply = scoreServiceDao.getApply(tel);
		if (client == null) {
			response.getWriter().print("noPhone");
		} else if (apply != null) {
			if (client.getType().equals(type) && client.getCode().equals(code)) {
				// 拼装json对象
				TTotalScore totalScore = scoreServiceDao.getTotal(tel);
				JSONArray array = new JSONArray();
				JSONObject jclient = new JSONObject();
				jclient.put("phone", client.getPhone());
				jclient.put("name", client.getName());
				jclient.put("type", client.getType());
				jclient.put("code", client.getCode());
				jclient.put("address", client.getAddress());
				JSONObject jtotal = new JSONObject();
				jtotal.put("isuse", totalScore.getVintegral());
				jtotal.put("total", totalScore.getTotal());
				array.put(jclient);
				array.put(jtotal);
				request.getSession().removeAttribute("totalScore");
				request.getSession().removeAttribute("client");
				request.getSession().removeAttribute("cart");
				request.getSession().setAttribute("client", client);
				request.getSession().setAttribute("totalScore", totalScore);
				response.getWriter().print(array);
			} else {
				response.getWriter().print("codeError");
			}
		} else {
			response.getWriter().print("noApply");
		}
		return null;
	}

	/**
	 * 进入消费列表
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward buy(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		TClient client = (TClient) request.getSession().getAttribute("client");
		String phone = client.getPhone();
		int rcount = scoreServiceDao.getPresentCount(phone);
		PageUtil pageUtil = new PageUtil(request, rcount,
				GlobVar.PAGESIZE_BY_BIG_DATA);
		List list = scoreServiceDao.presentList(phone, pageUtil);
		request.setAttribute("pageUtil", pageUtil);
		request.setAttribute("presentList", list);
		return new ActionForward("/admin/score/apply/buylist.jsp");
	}

	/**
	 * 跳转兑换操作页面
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward toPay(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		String id = request.getParameter("presentId");
		TPresent present = scoreServiceDao.getPresent(new Long(id));
		request.setAttribute("present", present);
		return new ActionForward("/admin/score/apply/change.jsp");
	}

	/**
	 * 兑换礼品
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward change(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		String pid = request.getParameter("presentId");
			TPresent present = scoreServiceDao.getPresent(new Long(pid));
			TChangeItem item = new TChangeItem();
			item.setPid(present.getId());
			item.setScore(present.getIntegral());
			item.setPname(present.getName());
			item.setPicture(present.getPicture());
			item.setVdate(present.getInvalidate());
			CartBean cartBean = null;
			if (request.getSession().getAttribute("cart") == null) {// 判断有没有购物车，如果没有，先初始化一辆购物车,不管有没有，都更新车内的商品信息
				cartBean = new CartBean();
				cartBean.buy(item);
				request.getSession().setAttribute("cart", cartBean);
			} else {
				cartBean = (CartBean) request.getSession().getAttribute("cart");
				cartBean.buy(item);
			}
	   return new ActionForward("/admin/score/apply/cart.jsp");		
	}

	/**
	 * 修改兑换礼品数量
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward modify(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		String pid = request.getParameter("presentId");
		String count = request.getParameter("count");
		TPresent present = scoreServiceDao.getPresent(new Long(pid));
		String url = request.getContextPath()+"/admin/score/apply/cart.jsp";
		if (new Long(count) > present.getNum()) {// 判断礼品库存是否够
			request.setAttribute("message", "礼品库存不够！请重设");
			request.setAttribute("url", url);
		} else {
			CartBean cartBean = (CartBean) request.getSession().getAttribute(
					"cart");
			cartBean.update(new Long(pid), new Long(count));
			request.setAttribute("message", "修改数量成功!");
			request.setAttribute("url", url);
					
		}
	    return mapping.findForward("result");
	}

	/**
	 * 删除礼品数量
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward delPresent(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		String pid = request.getParameter("presentId");
		CartBean cartBean = (CartBean) request.getSession()
				.getAttribute("cart");
		cartBean.delete(new Long(pid));
		String url = request.getContextPath()+"/admin/score/apply/cart.jsp";
		request.setAttribute("message", "删除成功!");
		request.setAttribute("url", url);
		return mapping.findForward("result");
	}

	/**
	 * 结算购物车
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward pay(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		TUser user = (TUser) request.getSession().getAttribute("user");
		TClient client = (TClient) request.getSession().getAttribute("client");
		TTotalScore total = (TTotalScore) request.getSession().getAttribute(
				"totalScore");
		CartBean carBean = (CartBean) request.getSession().getAttribute("cart");
		String url = request.getContextPath()+"/admin/score/apply/cart.jsp";
		
		

		if (carBean.getTotalScore() > total.getVintegral()) {// 判断积分是否足够
			request.setAttribute("message", "您的积分不够！请重新设置购买数量！");
			request.setAttribute("url", url);
			return mapping.findForward("result");
		}

		Map carMap = carBean.getCarMap();
		Date date = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(GlobVar
				.getDate());// 获取系统时间
		// 添加兑换记录
		TChange change = new TChange();
		int index = 0;
		String cid = String.valueOf(System.currentTimeMillis() + index);
		change.setId(cid);
		change.setType(new Long(carMap.size()));
		change.setChangenum(new Long(carBean.getCount()));
		change.setTotal(new Long(carBean.getTotalScore()));
		change.setPhone(client.getPhone());
		change.setOperater(user.getUserid());
		change.setCdate(date);

		// 添加兑换明细信息
		Iterator itemIterator = carMap.values().iterator();
		Set<TChangeItem> items = new HashSet<TChangeItem>();
		TPresent[] presents = new TPresent[carMap.size()];
		while (itemIterator.hasNext()) {
			TChangeItem item = (TChangeItem) itemIterator.next();
			// 修改相应的礼品
			TPresent present = new TPresent();
			present.setId(item.getPid());
			present.setNum(new Long("-" + item.getChangenum()));
			presents[index] = present;
			items.add(item);
			index++;
			change.setItems(items);
			item.setChange(change);
		}

		// 修改相应的积分
		TTotalScore totalScore = new TTotalScore();
		totalScore.setPhone(client.getPhone());
		totalScore.setInvalible(carBean.getTotalScore());
		totalScore.setVintegral(new Long("-" + carBean.getTotalScore()));

		// 记录兑换日志
		TScorelog scoreLog = new TScorelog();
		scoreLog.setChangeno(cid);
		scoreLog.setAfterscore(total.getVintegral() - carBean.getTotalScore());
		scoreLog.setBeforescore(total.getVintegral());
		scoreLog.setOpertype("0");
		scoreLog.setOperdate(date);
		scoreLog.setPhone(client.getPhone());
		scoreLog.setOperater(user.getUserid());

		try {
			scoreServiceDao.changeOperate(presents, change, totalScore,
					scoreLog);
		   carBean.getCarMap().clear();// 清空购物车
		   request.setAttribute("message", "结算成功!");
		   request.setAttribute("url", request.getContextPath()+"/admin/score.do?task=changeList");

		} catch (Exception e) {
			 request.setAttribute("message", "结算失败!");
			 request.setAttribute("url", request.getContextPath()+"/admin/score/apply/cart.jsp");
		}

		
		return mapping.findForward("result");
	}

	/**
	 * 进入兑换历史管理列表
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward changeList(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		ScoreForm scoreForm = (ScoreForm)form;
		TClient client = (TClient) request.getSession().getAttribute("client");		
		TChange change = new TChange();
		change.setPhone(client.getPhone());
		if(scoreForm.getSdate()!=null && !"".equals(scoreForm.getSdate())){
			change.setStartDate(new SimpleDateFormat("yyyy-MM-dd").parse(scoreForm.getSdate()));
		}
		if(scoreForm.getEdate()!=null && !"".equals(scoreForm.getEdate())){
			change.setEndDate(new SimpleDateFormat("yyyy-MM-dd").parse(scoreForm.getEdate()));
		}
		int rcount = scoreServiceDao.getChangeNum(change);
		PageUtil pageUtil = new PageUtil(request, rcount,
				GlobVar.PAGESIZE_BY_BIG_DATA);
		List list = scoreServiceDao.getChangeList(change, pageUtil);
		request.setAttribute("changeList", list);
		request.setAttribute("pageUtil", pageUtil);
		return new ActionForward("/admin/score/apply/changelist.jsp");
	}

	/**
	 * 查看兑换详情
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward changeItem(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		String cid = request.getParameter("cid");
		TChange change = scoreServiceDao.getChange(cid);
		request.setAttribute("change", change);
		return new ActionForward("/admin/score/apply/changedetail.jsp");
	}

	/**
	 * 回退礼品
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward doBack(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		TClient client = (TClient) request.getSession().getAttribute("client");
		TTotalScore total = (TTotalScore) request.getSession().getAttribute(
				"totalScore");
		TUser user = (TUser) request.getSession().getAttribute("user");
		String itemId = request.getParameter("itemId");
		String count = request.getParameter("count");
		TChangeItem item = scoreServiceDao.getItem(new Long(itemId));
		Date date = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(GlobVar
				.getDate());// 获取系统时间

		TChangeItem changeItem = new TChangeItem();
		changeItem.setId(item.getId());
		changeItem.setBacknum(item.getBacknum() - (new Long(count)));

		// 添加回退记录
		TBack back = new TBack();
		back.setCid(item.getCid());
		back.setBacknum(new Long(count));
		back.setPhone(client.getPhone());
		back.setOperater(user.getUserid());
		back.setBdate(date);
		back.setPrisentid(item.getPid());

		// 修改礼品数量
		TPresent[] present = new TPresent[1];
		TPresent p = new TPresent();
		p.setId(item.getPid());
		p.setNum(new Long(count));
		present[0] = p;

		// 修改相应的积分
		TTotalScore totalScore = new TTotalScore();
		totalScore.setPhone(client.getPhone());
		totalScore.setInvalible(new Long("-" + item.getScore()
				* (new Long(count))));
		totalScore.setVintegral(item.getScore() * (new Long(count)));

		// 记录操作日志
		TScorelog scoreLog = new TScorelog();
		scoreLog.setPhone(client.getPhone());
		scoreLog.setBeforescore(total.getVintegral());
		scoreLog.setAfterscore(total.getVintegral() + item.getScore()
				* (new Long(count)));
		scoreLog.setOperater(user.getUserid());
		scoreLog.setOperdate(date);
		scoreLog.setChangeno(item.getCid());
		scoreLog.setOpertype("1");
        String url = request.getContextPath()+"/admin/score.do?task=changeList";
		try {
			scoreServiceDao.doBack(changeItem, present, back, totalScore,
					scoreLog);
			request.setAttribute("message", "回退成功！");
			
		} catch (Exception e) {
			request.setAttribute("message", "回退失败！");
		}
		request.setAttribute("url", url);
		return mapping.findForward("result");
	}

	/**
	 * 查询月积分
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward searchMonth(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		ScoreForm scoreForm = (ScoreForm) form;
		TMonthScore month = new TMonthScore();
		BeanUtils.copyProperties(month, scoreForm);
		int count = scoreServiceDao.getMonthCount(month);
		PageUtil pageUtil = new PageUtil(request, count, 15);
		List list = scoreServiceDao.searchMonth(month, pageUtil);
		request.setAttribute("pageUtil", pageUtil);
		request.setAttribute("monthList", list);
		return new ActionForward("/admin/score/apply/month.jsp");
	}

	/**
	 * 查询年积分
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward searchYear(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		ScoreForm scoreForm = (ScoreForm) form;
		TYearScore year = new TYearScore();
		BeanUtils.copyProperties(year, scoreForm);
		int count = scoreServiceDao.getYearCount(year);
		PageUtil pageUtil = new PageUtil(request, count, 15);
		List list = scoreServiceDao.searchYear(year, pageUtil);
		request.setAttribute("pageUtil", pageUtil);
		request.setAttribute("yearList", list);
		return new ActionForward("/admin/score/apply/year.jsp");
	}

	/**
	 * 查询总积分
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward searchTotal(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		ScoreForm scoreForm = (ScoreForm) form;
		TTotalScore total = new TTotalScore();
		BeanUtils.copyProperties(total, scoreForm);
		int count = scoreServiceDao.getTotalCount(total);
		PageUtil pageUtil = new PageUtil(request, count, 15);
		List list = scoreServiceDao.searchTotal(total, pageUtil);
		request.setAttribute("pageUtil", pageUtil);
		request.setAttribute("totalList", list);
		return new ActionForward("/admin/score/apply/total.jsp");
	}

	/**
	 * 消费查询
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward searchChange(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		ScoreForm scoreForm = (ScoreForm) form;
		TChange change = new TChange();
		BeanUtils.copyProperties(change, scoreForm);
		int count = scoreServiceDao.getChangeCount(change);
		PageUtil pageUtil = new PageUtil(request,count,GlobVar.PAGESIZE_BY_BIG_DATA);
		List list = scoreServiceDao.searchChange(change, pageUtil);
		request.setAttribute("changeList", list);
		request.setAttribute("pageUtil", pageUtil);
		return new ActionForward("/admin/score/apply/pay.jsp");
	}
	
	/**
	 * 积分日志查询
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward searchLog(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		ScoreForm scoreForm = (ScoreForm) form;
		TScorelog  log = new TScorelog();
		BeanUtils.copyProperties(log, scoreForm);
		if(scoreForm.getSdate()!=null&&!"".equals(scoreForm.getSdate())){
			log.setStart(new SimpleDateFormat("yyyy-MM-dd").parse(scoreForm.getSdate()));
		}
		if(scoreForm.getEdate()!=null && !"".equals(scoreForm.getEdate())){
			log.setEnd(new SimpleDateFormat("yyyy-MM-dd").parse(scoreForm.getEdate()));
		}
		
		int count = scoreServiceDao.getLogCount(log);
		PageUtil pageUtil = new PageUtil(request,count,GlobVar.PAGESIZE_BY_BIG_DATA);
		List list = scoreServiceDao.searchLog(log, pageUtil);
		request.setAttribute("logList", list);
		request.setAttribute("pageUtil", pageUtil);
		return new ActionForward("/admin/score/apply/log.jsp");
	}
	
	public ScoreServiceDao getScoreServiceDao() {
		return scoreServiceDao;
	}

	public void setScoreServiceDao(ScoreServiceDao scoreServiceDao) {
		this.scoreServiceDao = scoreServiceDao;
	}
}