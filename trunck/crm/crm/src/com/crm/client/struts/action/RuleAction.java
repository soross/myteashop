/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.crm.client.struts.action;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.crm.client.po.TClientrule;
import com.crm.client.po.TRuleexp;
import com.crm.client.po.TRulelog;
import com.crm.client.service.inf.RuleServiceDao;
import com.crm.client.struts.form.RuleForm;
import com.crm.page.PageUtil;
import com.crm.pub.GlobVar;
import com.crm.pub.po.TUser;

/**
 * MyEclipse Struts Creation date: 10-29-2009
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/admin/rule" name="ruleForm" input="/form/rule.jsp"
 *                parameter="task" scope="request" validate="true"
 */
public class RuleAction extends DispatchAction {
	/*
	 * Generated Methods
	 */

	private RuleServiceDao ruleServiceDao;
	
	
	/**
	 * 规则日志
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward searchRuleLog(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		RuleForm ruleForm = (RuleForm) form;
		Integer count = this.ruleServiceDao.getRuleLogCount();
		PageUtil pageUtil = new PageUtil(request,count,GlobVar.PAGESIZE_BY_TEN_DATA);
		List logList = this.ruleServiceDao.getRuleLogList(pageUtil);
		
		request.setAttribute("pageUtil", pageUtil);
		request.setAttribute("logList", logList);
		
		return new ActionForward("/admin/client/rule/loglist.jsp");
	}


	/**
	 * 添加
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward updateClientRule(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		RuleForm ruleForm = (RuleForm) form;

		TClientrule clientrule = new TClientrule();
		BeanUtils.copyProperties(clientrule, ruleForm);

		TRulelog rulelog = new TRulelog();
		rulelog.setRuleid(new Long(ruleForm.getId()));
		rulelog.setCreater(((TUser) request.getSession().getAttribute("user"))
				.getUserid());
		rulelog.setCreatedate(new Date());
		rulelog.setOpertype("1");

		for (int i = 0; i < ruleForm.getType().length; i++) {
			TRuleexp ruleexp = new TRuleexp();
			ruleexp.setType(ruleForm.getType()[i]);
			ruleexp.setStartvalue(ruleForm.getStartvalue()[i]);
//			ruleexp.setEndvalue(ruleForm.getEndvalue()[i]);
//			ruleexp.setExpression(ruleForm.getStartvalue()[i] + "<="
//					+ ruleForm.getType()[i] + "<=" + ruleForm.getEndvalue()[i]);
			
			if (-1 != ruleForm.getEndvalue()[i]) {
				ruleexp.setEndvalue(ruleForm.getEndvalue()[i]);
			} else {
				ruleexp.setEndvalue(null);
			}
			if (-1 != ruleForm.getEndvalue()[i]) {
				ruleexp.setExpression(ruleForm.getStartvalue()[i] + "≤"
						+ ruleForm.getType()[i] + "≤"
						+ ruleForm.getEndvalue()[i]);
			} else {
				ruleexp.setExpression(ruleForm.getStartvalue()[i] + "≤"
						+ ruleForm.getType()[i]);
			}
			
			// 互设
			clientrule.getRuleExps().add(ruleexp);
			ruleexp.setClientrule(clientrule);
		}

		Boolean bool = this.ruleServiceDao
				.updateClientRule(clientrule, rulelog);

		// 跳转
		if (bool) {
			response
					.getWriter()
					.write(
							"<script>alert('规则修改成功！');location.href='"
									+ request.getContextPath()
									+ "/admin/rule.do?task=toRuleInfo&id="+
									clientrule.getId()
									+"';</script>");
		} else {
			response.getWriter().write(
					"<script>alert('规则修改失败！');location.href='"
							+ request.getContextPath()
							+ "/admin/rule.do?task=toRuleInfo&id="+
									clientrule.getId()
									+"';</script>");
		}

		return null;
	}

	/**
	 * 添加
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward addClientRule(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		RuleForm ruleForm = (RuleForm) form;

		Integer seqNextVal = this.ruleServiceDao.getSeqNextValue();

		TClientrule clientrule = new TClientrule();
		BeanUtils.copyProperties(clientrule, ruleForm);
		clientrule.setId(new Long(seqNextVal));

		TRulelog rulelog = new TRulelog();
		rulelog.setRuleid(new Long(seqNextVal));
		rulelog.setCreater(((TUser) request.getSession().getAttribute("user"))
				.getUserid());
		rulelog.setCreatedate(new Date());
		
		try{
		for (int i = 0; i < ruleForm.getType().length; i++) {
			TRuleexp ruleexp = new TRuleexp();

			ruleexp.setType(ruleForm.getType()[i]);
			ruleexp.setStartvalue(ruleForm.getStartvalue()[i]);
			if (-1 != ruleForm.getEndvalue()[i]) {
				ruleexp.setEndvalue(ruleForm.getEndvalue()[i]);
			} else {
				ruleexp.setEndvalue(null);
			}
			if (-1 != ruleForm.getEndvalue()[i]) {
				ruleexp.setExpression(ruleForm.getStartvalue()[i] + "≤"
						+ ruleForm.getType()[i] + "≤"
						+ ruleForm.getEndvalue()[i]);
			} else {
				ruleexp.setExpression(ruleForm.getStartvalue()[i] + "≤"
						+ ruleForm.getType()[i]);
			}

			// 互设
			clientrule.getRuleExps().add(ruleexp);
			ruleexp.setClientrule(clientrule);

		}
		}
		catch (Exception e) {
			e.printStackTrace();
		}

		Boolean bool = this.ruleServiceDao.addClientRule(clientrule, rulelog);

		// 跳转
		if (bool) {
			response
					.getWriter()
					.write(
							"<script>if(confirm('规则添加成功！是否继续添加！')){location.href='"
									+ request.getContextPath()
									+ "/admin/client/rule/addrule.jsp;'}else{location.href='"
									+ request.getContextPath()
									+ "/admin/rule.do?task=ruleList';}</script>");
		} else {
			response.getWriter().write(
					"<script>alert('规则添加失败！');location.href='"
							+ request.getContextPath()
							+ "/admin/rule.do?task=ruleList';</script>");
		}

		return null;
	}

	/**
	 * 删除规则
	 * 
	 * 规则表达式也一同删除
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward deleteRule(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		RuleForm ruleForm = (RuleForm) form;
		
		TRulelog rulelog = new TRulelog();
		rulelog.setRuleid(ruleForm.getId());
		rulelog.setOperator(((TUser) request.getSession().getAttribute("user"))
				.getUserid());
		rulelog.setOperdate(new Date());
		rulelog.setOpertype("2");	
		
		Boolean bool = this.ruleServiceDao.deleteClientRule(ruleForm.getId(),rulelog);
		// 跳转
		if (bool) {
			response.getWriter().write(
					"<script>alert('规则删除成功！');location.href='"
							+ request.getContextPath()
							+ "/admin/rule.do?task=ruleList';</script>");
		} else {
			response.getWriter().write(
					"<script>alert('规则删除失败！');location.href='"
							+ request.getContextPath()
							+ "/admin/rule.do?task=ruleList';</script>");
		}

		return null;
	}

	/**
	 * 锁定规则
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward lockRule(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		RuleForm ruleForm = (RuleForm) form;
		// 取得规则是要锁定或者解锁的信息
		TClientrule clientrule = new TClientrule();
		clientrule.setId(ruleForm.getId());
		clientrule.setIslock(ruleForm.getIslock());
		// 更新操作
		Boolean bool = this.ruleServiceDao.updateClientRule(clientrule);
		// 跳转
		if (bool) {
			// 判断是执行锁定还是解锁
			if ("0".equals(ruleForm.getIslock())) {
				response.getWriter().write(
						"<script>alert('规则解锁成功！');location.href='"
								+ request.getContextPath()
								+ "/admin/rule.do?task=toRuleInfo&id="
								+ ruleForm.getId() + "';</script>");
			} else if ("1".equals(ruleForm.getIslock())) {
				response.getWriter().write(
						"<script>alert('规则锁定成功！');location.href='"
								+ request.getContextPath()
								+ "/admin/rule.do?task=toRuleInfo&id="
								+ ruleForm.getId() + "';</script>");
			}
		} else {
			if ("0".equals(ruleForm.getIslock())) {
				response.getWriter().write(
						"<script>alert('规则解锁失败！');location.href='"
								+ request.getContextPath()
								+ "/admin/rule.do?task=toRuleInfo&id="
								+ ruleForm.getId() + "';</script>");
			} else if ("1".equals(ruleForm.getIslock())) {
				response.getWriter().write(
						"<script>alert('规则锁定失败！');location.href='"
								+ request.getContextPath()
								+ "/admin/rule.do?task=toRuleInfo&id="
								+ ruleForm.getId() + "'</script>");
			}
		}
		return null;
	}

	/**
	 * 规则详细信息
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward toUpdateRule(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		RuleForm ruleForm = (RuleForm) form;

		TClientrule rule = new TClientrule();
		rule.setId(ruleForm.getId());
		TRuleexp ruleexp = new TRuleexp();
		ruleexp.setRuleid(ruleForm.getId());

		TClientrule clientrule = ruleServiceDao.searchClientrule(rule);
		request.setAttribute("rule", clientrule);
		List<TRuleexp> list = new ArrayList<TRuleexp>(clientrule.getRuleExps());
		request.setAttribute("exps", list);
		BeanUtils.copyProperties(ruleForm, clientrule);

		return new ActionForward("/admin/client/rule/updaterule.jsp");
	}

	/**
	 * 规则详细信息
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward toRuleInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		RuleForm ruleForm = (RuleForm) form;

		TClientrule rule = new TClientrule();
		rule.setId(ruleForm.getId());
		TRuleexp ruleexp = new TRuleexp();
		ruleexp.setRuleid(ruleForm.getId());

		TClientrule clientrule = ruleServiceDao.searchClientrule(rule);
		request.setAttribute("rule", clientrule);
		List list = new ArrayList<TRuleexp>(clientrule.getRuleExps());
		request.setAttribute("exps", list);

		return new ActionForward("/admin/client/rule/ruleinfo.jsp");
	}

	/**
	 * 规则列表
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward ruleList(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		RuleForm ruleForm = (RuleForm) form;
		TClientrule rule = new TClientrule();
		BeanUtils.copyProperties(rule, ruleForm);

		Integer count = this.ruleServiceDao.getCount(rule);

		PageUtil pageUtil = new PageUtil(request, count,
				GlobVar.PAGESIZE_BY_TEN_DATA);
		request.setAttribute("pageUtil", pageUtil);

		List list = this.ruleServiceDao.searchRuleList(rule, pageUtil);

		request.setAttribute("ruleList", list);
		return new ActionForward("/admin/client/rule/rulelist.jsp");
	}

	public RuleServiceDao getRuleServiceDao() {
		return ruleServiceDao;
	}

	public void setRuleServiceDao(RuleServiceDao ruleServiceDao) {
		this.ruleServiceDao = ruleServiceDao;
	}
}